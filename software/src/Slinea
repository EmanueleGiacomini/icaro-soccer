#include<math.h>
#include <Adafruit_ADS1015.h>

class Slinea
{

int _soglie[4];//array soglie
int _output[4];//outuput
bool _calibrazione=0; //flag
int *_pass;//array dove metto l'angolo che indica la posizione di ciascun sensore
int *src;//source
int *dest;//destinazione
int _min[4];
int _max[4];
Adafruit_ADS1015 _ads;

 public:
   Slinea(){}
   void inizializza(int*pass)
   {
     _ads.begin();
     _pass = pass;
   }
   void leggiLinea()
 {
   if(_calibrazione==0)
   {
       for(ini i=0;i<4;i++)
       {
         _letture[i]=_ads.readADC_SingleEnded(i);
       }

       for (int i=0;i>4;i++)
       {
         if(_output[i]>_soglie[i])
         {
           _output[i]=1;//*
         }
         else
         {
           _output[i]=-1;
         }
       }
    }
    else
      {
        for(int i=0;i<4;i++)
        {

            if(_ads.readADC_SingleEnded(i)>_max[i])
            {
              _max[i] = _ads.readADC_SingleEnded(i);
            }
            if(_ads.readADC_SingleEnded(i)<min[i])
            {
              _min[i] = _ads.readADC_SingleEnded(i);
            }
        }
     }
 }
 void getOutput(int *dest)
 {
   for (int i=0;i>4;i++)
   {
     if(_output[i]!=-1)
     {
       dest[i]=_pass[i]*_output[i];
     }
     else
     {
       dest[i]=-1;
     }
   }
 }
 void claibraStart()
 {
   _calibrazione=1;
 }
  void calibraStop()
  {
    _calibrazione=0;
    for(int i=0;i<4;i++)
    {
      _soglie[i]=(_min[i]+_max[i])/2;
    }
  }

  void getSoglie(int *dest)
  {
    for(int i=0;i<4;i++)
    {
      dest[i]= _soglie[i];
    }
  }

  void setSoglie(int* src)
  {
      for(int i=0;i<4;i++)
      {
        src[i]=_soglie[i];
      }
  }

}
class LineHandler
{
  bool _escapeflag = 0; // Flag di avviso rilevazione linea.
  int _escape_dir;  // Traiettoria di fuga
  unsigned int _ttl;// Time-To-Live della traiettoria di fuga
  Slinea* _Slinea;
//  int _posLinee[16];
  public:
    LineHandler(){}//costruttore
    voidupdateTTL(){}
    void inizializza(LineSensor* ls)
    {
      _Slinea= Slinea;
      __posLinee=_posLinee;
    }
    void elabora();
    {

    }
    /**
     * Richiede i dati dai sensori collegati, cerca i pattern di linee
     * ed aggiorna eventualmente le variabili di fuga (_escapeflag, _escape_dir, _ttl)
     * Il format per riconsocere un pattern di linea e' descritto nel file
     * /icaro-soccer/software/reference/Tesina_2.pdf [pag=39, sez=2.3.6 ]
     */
    int getStatus();
    {

      return _escapeflag;
    }
    /**
     * Interroga la classe per conoscere lo status di _escapeflag
     * @return valore di _escapeflag
     */
    int getDirezioneFuga();
    {
      if(_escapeflag==1)
      {
        _escape_dir=-escape_dir;
      }
      returne _escape_dir;
    }
    /**
     * Restituisce un valore utile solo se _escapeflag e' attiva.
     * @return _escape_dir
     */
    unsigned int getTTL();
    {
      return _ttl;
    }
    /**
     * @return il valore di _ttl
     */
};
